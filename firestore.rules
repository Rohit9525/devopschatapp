rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isParticipant(participants) {
      return isSignedIn() && request.auth.uid in participants;
    }

    function isAdmin(admins) {
      return isSignedIn() && request.auth.uid in admins;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);

      // Allow updating specific fields
      allow update: if isSignedIn() && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['displayName', 'photoURL', 'lastSeen', 'online', 'contacts'])
      );
    }

    // Chat rooms collection
    match /chatRooms/{roomId} {
      allow read: if isSignedIn() && (
        resource.data.type == 'private' ?
        request.auth.uid in resource.data.participants :
        request.auth.uid in resource.data.participants || request.auth.uid in resource.data.admins
      );

      allow create: if isSignedIn();

      allow update: if isSignedIn() && (
        (resource.data.type == 'private' && request.auth.uid in resource.data.participants) ||
        (resource.data.type == 'group' && (
          request.auth.uid in resource.data.participants ||
          request.auth.uid in resource.data.admins
        ))
      );

      allow delete: if isSignedIn() && (
        (resource.data.type == 'private' && request.auth.uid in resource.data.participants) ||
        (resource.data.type == 'group' && request.auth.uid in resource.data.admins)
      );

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
          get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants[request.auth.uid] != null ||
          get(/databases/$(database)/documents/chatRooms/$(roomId)).data.admins[request.auth.uid] != null
        );

        allow create: if isSignedIn() && (
          get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants[request.auth.uid] != null
        );

        allow update, delete: if isSignedIn() && (
          resource.data.senderId == request.auth.uid ||
          get(/databases/$(database)/documents/chatRooms/$(roomId)).data.admins[request.auth.uid] != null
        );
      }
    }

    // Calls collection
    match /calls/{callId} {
      allow read: if isSignedIn() && (
        resource.data.callerId == request.auth.uid || resource.data.receiverId == request.auth.uid
      );
      allow create: if isSignedIn() && request.resource.data.keys().hasOnly(['callerId', 'receiverId', 'status', 'createdAt']);
      allow update: if isSignedIn() && (
        resource.data.callerId == request.auth.uid || resource.data.receiverId == request.auth.uid
      );
      allow delete: if false; // Prevent deleting calls directly

      // Offer Candidates subcollection
      match /offerCandidates/{offerId} {
        allow read, create, update: if isSignedIn() && (
          get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid
        );
        allow delete: if false;
      }

      // Answer Candidates subcollection
      match /answerCandidates/{answerId} {
        allow read, create, update: if isSignedIn() && (
          get(/databases/$(database)/documents/calls/$(callId)).data.receiverId == request.auth.uid
        );
        allow delete: if false;
      }
    }
  }
}
